#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""This is an ansible wrapper to help you to exec the different playbooks with your
inventories.

By default don't exec nothing only show the commands. With --nodryrun you can exec
the real commands.

With 'main' only operates over your main host.

Usage:
   ansiblew --alainstall=<dir_of_ala_install_repo> [options] [ ( main<% for(var j=0; j < LA_services_machines.length; j++) { %> | <%= LA_services_machines[j].map.name %><% } %> )... | all ]
   ansiblew -h | --help
   ansiblew -v | --version

Options:
  -n --nodryrun          Exec the ansible-playbook commands
  -p --properties        Only update properties
  -l --limit=<hosts>     Limit to some inventories hosts
  -s --skip=<tags>       Skip tags
  -t --tags=<tags>       Limit to tags
  -e --extra=<vars>      Extra variables to pass to ansible-playbook
  -h --help              Show help options.
  -u --user=<user>       Ansible become user [default: ubuntu]
  -c --continue          Continue even if some ansible cmd fails
  -d --debug             Show debug info.
  -v --version           Show ansiblew version.
----
ansiblew 0.1.0
Copyright (C) 2019 living-atlases.gbif.org
Apache 2.0 License
"""
from docopt import docopt
import sys
import subprocess
import os.path

def execCmd(cmd, fail_on_error, nodryrun):
    if nodryrun:
        # Show the resulting command
        subprocess.call("echo %s\n" % cmd, shell=True)
    # exec the command
    code = subprocess.call(cmd, shell=True)
    if (code != 0 and fail_on_error):
        sys.exit(code);

if __name__ == '__main__':
    args = docopt(__doc__)

    nodryrun = args['--nodryrun']
    debug = args['--debug']
    properties = args['--properties']
    skip = args['--skip']
    user = args['--user']
    tags = args['--tags']
    limit = args['--limit']
    main = args['main']
    doall = args['all']
    alainstall = args['--alainstall']
    cmdPrefix = "echo "
    extras = ""
    extraInvs = ""
    pkg = "<%= LA_pkg_name %>"
    extra_vars = args['--extra']
    fail_on_error = not args['--continue']

    # Add here some additional param for ansible like your ssh key, like:
    # additionalParams = "--private-key ~/.ssh/MyKey.pem"
    additionalParams = ""

    if debug:
        print(args)

    if properties:
        extras = "%s --tags properties" % (extras)
    if skip:
        extras = "%s --skip-tags %s" % (extras, skip)
    if tags:
        extras = "%s --tags %s" % (extras, tags)
    if debug:
        extras = "%s -vvvv" % (extras)
    if extra_vars:
        extras = "%s --extra-vars %s" % (extras, extra_vars)
    if nodryrun:
        cmdPrefix = ""

    if debug:
        print("Extras: %s" % (extras))

    if os.path.isfile("%s-toolkit.ini" % pkg):
        extraInvs = "-i %s-toolkit.ini" % pkg

    baseInventories = "-i %s-inventory.ini -i %s-local-extras.ini" % (pkg, pkg)

    if main or doall:
        newServerCmd = "%s ansible-playbook %s -u %s %s %s/ansible/newserver.yml %s --extra-vars 'target=all' --limit %s" % (cmdPrefix, additionalParams, user, baseInventories, alainstall, extras, limit if limit else "<%= LA_main_hostname %>")
        execCmd(newServerCmd, fail_on_error, nodryrun)
        mainCmd = "%s ansible-playbook %s -u %s %s -i %s-local-passwords.ini %s/ansible/ala-demo-basic.yml %s --limit %s" % (cmdPrefix, additionalParams, user, baseInventories, pkg, alainstall, extras, limit if limit else "<%= LA_main_hostname %>")
        execCmd(mainCmd, fail_on_error, nodryrun)

    <% for(var j=0; j < LA_services_machines.length; j++) {
        let isSpatialInv = LA_services_machines[j].map.name === 'spatial';
        let isCasInv = LA_services_machines[j].map.name === 'cas';
        let extraInv;

        %>if args['<%= LA_services_machines[j].map.name %>'] or doall:
        extraInventories = "<%= extraInv %> %s" % extraInvs
        newServerCmd = "%s ansible-playbook %s -u %s %s %s %s/ansible/newserver.yml %s --limit %s --extra-vars 'target=all ala_install_repo=%s'" % (cmdPrefix, additionalParams, user, baseInventories, extraInventories, alainstall, extras, limit if limit else "<%= LA_services_machines[j].machine %>", alainstall)
        execCmd(newServerCmd, fail_on_error, nodryrun)
        otherCmd = "%s ansible-playbook %s -u %s %s %s -i %s-local-passwords.ini %s/ansible/<%= LA_services_machines[j].map.playbook %>.yml %s --limit %s --extra-vars 'ala_install_repo=%s'" % (cmdPrefix, additionalParams, user, baseInventories, extraInventories, pkg, alainstall, extras, limit if limit else "<%= LA_services_machines[j].machine %>", alainstall)
        execCmd(otherCmd, fail_on_error, nodryrun)
    <% } %>
